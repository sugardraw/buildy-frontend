import React from "react";
import {
  View,
  StyleSheet,
  Text,
  FlatList,
  Image,
  TouchableOpacity
} from "react-native";
import axios from "axios";
import { MaterialIcons } from "@expo/vector-icons";
import { FileSystem, MailComposer } from "expo";
import { api } from "../../api/api";
import { Card, CardItem, Body } from "native-base";

class SelectCompanies extends React.Component {
  static navigationOptions = {
    title: "SELECT COMPANIES",
    headerStyle: { backgroundColor: "#white" },
    headerTintColor: "#85c4ea"
  };
  constructor() {
    super();
    this.state = {
      companies: null
    };
  }

  componentDidMount() {
    axios
      .get(api + "/api/professional/listAll")
      .then(response => {
        response.data.map(item => {
          item.isSelect = false;
          item.selectedClass = styles.list;
          return item;
        });
        this.setState({
          companies: response.data
        });
      })
      .catch(error => {
        throw error;
      });
  }

  selectItem = item => {
    item.isSelect = !item.isSelect;
    item.selectedClass = item.isSelect ? styles.selected : styles.list;
    const index = this.state.companies.findIndex(ele => ele._id === item._id);
    this.state.companies[index] = item;
    this.setState({
      companies: this.state.companies
    });
  };

  sendAsEmail = async () => {
    let companiesEmails = [];

    for (let i in this.state.companies) {
      if (this.state.companies[i].isSelect) {
        companiesEmails.push(this.state.companies[i].email);
      }
    }

    /**
     * informations to be implemented:
     *
     * recipients will be updated with the company email
     * subject or more emails, if you want to send to many diferent
     * companies
     *
     *
     */

    let uriArray = this.props.navigation.getParam("uriArray", "no_images");
    let userData = this.props.navigation.getParam("userData", "no_userData");
    let requestData = this.props.navigation.getParam(
      "requestData",
      "no_requestData"
    );

    await MailComposer.composeAsync({
      recipients: ["sergiousle@gmail.com", ...companiesEmails],
      subject: `estimation request from ${userData.first_name}`,
      body: `To Whom It May Concern,
      
      I would like to ask for a price estimation for an inner reform 
      in my house.
      More details in the following text:
            
      Title: ${requestData.title}
      Description: ${requestData.description}
      Budget: ${requestData.budget}
      Preferred starting date:${requestData.date}
      I attached to this email some pictures in order to illustrate better 
      my expectation.
      I look forward to have news from you,
      Thanks in advance, 
      ${userData.first_name}  ${userData.last_name}


      ________________________________________________
      this email was automatically generated by BUILDY.
      Please note that BUILDY does not take any responsibility
      for any requests`,
      attachments: uriArray
    });
  };

  keyExtractor = (item, index) => String(item._id);
  renderItem = ({ item }) => {
    return (
      <TouchableOpacity
        style={[styles.list, item.selectedClass, { padding: 10 }]}
        onPress={() => this.selectItem(item)}
      >
        {typeof item.avatar == "string" ? (
          <View style={{ marginLeft: 10, padding: 10 }}>
            <Image
              style={{ width: 50, height: 50, borderRadius: 50 }}
              source={{ uri: api + item.avatar }}
            />
          </View>
        ) : (
          <View style={{ marginLeft: 10, padding: 10 }}>
            <Image
              style={{ width: 50, height: 50, borderRadius: 50 }}
              source={{ uri: api + "/" + item.avatar[0].path }}
            />
          </View>
        )}
        <Text
          style={{
            fontSize: 14,
            fontWeight: "bold",
            marginLeft: 10,
            color: "white"
          }}
        >
          {item.name}
        </Text>
      </TouchableOpacity>
    );
  };

  render() {
    if (this.state.companies !== null) {
      return (
        <View style={styles.container}>
          <FlatList
            contentContainerStyle={{ flexGrow: 1 }}
            data={this.state.companies}
            keyExtractor={this.keyExtractor}
            renderItem={this.renderItem}
          />
          <TouchableOpacity
            style={styles.button}
            onPress={() => this.sendAsEmail()}
          >
            <MaterialIcons name="send" size={30} color="white" />
          </TouchableOpacity>
        </View>
      );
    } else {
      return (
        <View style={styles.container}>
          <Text> Waiting for data...</Text>
        </View>
      );
    }
  }
}

export default SelectCompanies;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 20
  },
  list: {
    paddingVertical: 5,
    margin: 3,
    flexDirection: "row",
    backgroundColor: "#D0E8E3",
    justifyContent: "flex-start",
    alignItems: "center",
    zIndex: -1
  },
  button: {
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    borderWidth: 1,
    borderRadius: 50,
    bottom: 20,
    right: 10,
    margin: 10,
    width: 50,
    height: 50,
    backgroundColor: "#85c4ea",
    marginBottom: 10,
    borderColor: "#85c4ea"
  },
  selected: { backgroundColor: "#FA7B5F" }
});
